GameMiscOperator:
    gameTimeKey = game.time
    numTurnsPerTermKey = game.numTurnsPerTerm
    numMonthsPerTurnKey = game.numMonthsPerTurn
    turnNumberKey = game.turn
    numTurnsToNextElectionsKey = game.numTurnsToNextElections
    gameEventsKey = game.events
    electionsResultKey = game.electionsResult
    electionsMaxErrorKey = game.electionsMaxError
    approvalRatingKey = society.approvalRating
    seed = 1128069819962
    maxNumWarnings = 3
End 

PopulationModel:
    retirementAgeKey = policies.retirementAge.value
    totalPopulationKey = society.totalPopulation
    numRetiredKey = socialGroups.retired.numPeople
    workforceKey = economics.workforce
    maturityAgeKey = society.maturityAge
    maximumAgeKey = society.maximumAge
    seed = 1128069819962
    populationMaxSpread = 10000
End

ExportsGenerator:
    realExportsKey = economics.realExports
    exportsKey = economics.exports
    globalEconomyConditionKey = economics.globalEconomyCondition
    priceLevelKey = economics.priceLevel
    seed = 1195407615058
    gec_p = 0.2
    gec_a = 0.3
    re_b = 4.0
    re_deley = 12.0
End

ImportsCalculator:
    realImportsKey = economics.realImports
    importsKey = economics.imports
    priceLevelKey = economics.priceLevel
    inflationRateKey = economics.inflationRate
    f2 = 10.0
    deley = 12.0
    seed = 1373469279962
End

InvestmentCalculator:
    inflationRateKey = economics.inflationRate
    realInvestmentKey = economics.realInvestment
    investmentKey = economics.investment
    priceLevelKey = economics.priceLevel
    nationalDebtKey = economics.nationalDebt
    publicSectorEffectivenessKey = publicSector.effectiveness
    realAveWageInPrivateSectorKey = socialGroups.privateSectorEmployees.realAverageGrossIncome
    infl_b = 1.1
    ndebt_a = 1.0
    pse_a = 2.0
    aw_a = -0.01
    deley = 12.0
End

ConsumptionCalculator:
    realConsumptionKey = economics.realConsumption
    consumptionKey = economics.consumption
    priceLevelKey = economics.priceLevel
    realOutputKey = economics.realOutput
    f1 = 0.9
End

GovernmentSpendingCalculator:
    priceLevelKey = economics.priceLevel
    governmentSpendingKey = economics.governmentSpending
    realGovernmentSpendingKey = economics.realGovernmentSpending
    publicSectorFundingValueKey = policies.publicSectorFunding.value
    publicSectorFundingCostsKey = policies.publicSectorFunding.costs
    retirementBenefitsValueKey = policies.retirementBenefits.value
    retirementBenefitsCostsKey = policies.retirementBenefits.costs
    unemploymentBenefitsValueKey = policies.unemploymentBenefits.value
    unemploymentBenefitsCostsKey = policies.unemploymentBenefits.costs
    retiredRealAverageIncomeKey = socialGroups.retired.realAverageGrossIncome
    retiredAverageIncomeKey = socialGroups.retired.averageGrossIncome
    retiredNumPeopleKey = socialGroups.retired.numPeople
    unemployedRealAverageIncomeKey = socialGroups.unemployed.realAverageGrossIncome
    unemployedAverageIncomeKey = socialGroups.unemployed.averageGrossIncome
    unemployedNumPeopleKey = socialGroups.unemployed.numPeople
End 

TaxRevenuesCalculator:
    taxRevenuesKey = economics.taxRevenues
    realTaxRevenuesKey = economics.realTaxRevenues
    vatRateKey = policies.vat.value
    vatRevenuesKey = policies.vat.revenues
    incomeTaxRateKey = policies.incomeTax.value
    incomeTaxRevenuesKey = policies.incomeTax.revenues
    realConsumptionKey = economics.realConsumption
    realInvestmentKey = economics.realInvestment
    realExportsKey = economics.realExports
    realImportsKey = economics.realImports
    publicSectorFundingKey = policies.publicSectorFunding.value
    priceLevelKey = economics.priceLevel
End 

PrivateSectorModel:
    
    # *** Registry Keys ***
    workforceKey = economics.workforce
    numEmployedPrivKey = socialGroups.privateSectorEmployees.numPeople
    numEmployedPublKey = socialGroups.publicSectorEmployees.numPeople
    numUnemployed = socialGroups.unemployed.numPeople
    unemploymentBenefitsKey = policies.unemploymentBenefits.value
    outputKey = economics.output
    realOutputKey = economics.realOutput
    realConsumptionKey = economics.realConsumption
    realInvestmentKey = economics.realInvestment
    realGovernmentSpendingKey = economics.realGovernmentSpending
    realTaxRevenuesKey = economics.realTaxRevenues
    realExportsKey = economics.realExports
    realImportsKey = economics.realImports
    labourProductivityKey = economics.labourProductivity
    priceLevelKey = economics.priceLevel
    aveWagePrivKey = socialGroups.privateSectorEmployees.averageGrossIncome
    realAveWagePrivKey = socialGroups.privateSectorEmployees.realAverageGrossIncome
    unemploymentRateKey = economics.unemploymentRate
    willingnessToWorkKey = economics.willingnessToWork
    inflationPressureKey = economics.inflationPressure
    
	# *** Random number generator seed ***
    seed = 0
    
	# *** Number Employed (ne) ***
	ne_baseDeley = 2.0
	ne_d1 = 6.0
	ne_f2 = 14.0
	
	# *** Average Wage (aw) ***
	aw_min = 0.0
    aw_deley = 2.0
    aw_f1 = 2000.0
	
	# *** Pressure weights ***
	w_ep_output = 1.0
    w_ip_output = 0.4
    w_ip_wage = 0.2
    
End

GDPCalculator:
    inflationRateKey = economics.inflationRate
    outputKey = economics.output
    gdpKey = economics.gdp
    gdpGrowthRateKey = economics.gdpGrowthRate
End

InflationModel:
    inflationRateKey = economics.inflationRate
    priceLevelKey = economics.priceLevel
    inflationPressureKey = economics.inflationPressure
    vatRateKey = policies.vat.value
    deflationWeight = 0.1
End

PublicSectorModel:
    priceLevelKey = economics.priceLevel
    publicSectorEffectivenessKey = publicSector.effectiveness
    publicSectorOptimumEmplToPopKey = publicSector.optimumEmploymentToPopulation
    publicSectorOptimumFundToGDPKey = publicSector.optimumFundingToGDP
    gdpKey = economics.gdp
    numEmployedPublKey = socialGroups.publicSectorEmployees.numPeople
    numEmployedPrivKey = socialGroups.privateSectorEmployees.numPeople
    aveWageInPublicSectorKey = socialGroups.publicSectorEmployees.averageGrossIncome
    realAveWageInPublicSectorKey = socialGroups.publicSectorEmployees.realAverageGrossIncome
    aveWageInPrivateSectorKey = socialGroups.privateSectorEmployees.averageGrossIncome
    fundingKey = policies.publicSectorFunding.value
    numUnemployedKey = socialGroups.unemployed.numPeople
    workforceKey = economics.workforce
    unemploymentRateKey = economics.unemploymentRate
    unemploymentBenefitsKey = policies.unemploymentBenefits.value
    populationKey = society.totalPopulation
    eventsKey = game.events
    ne_baseDeley = 3.0
    ne_d1 = 6.0
    ne_f2 = 12.0
    ne_f3 = 0.002
    pse_deley = 2.0
    events_a = 6.0
    events = hospital_banckrupcy, not_enough_doctors, fuel_shortage_in_police
    seed = 1173469879962
End 

BudgetDeficitCalculator:
    governmentSpendingKey = economics.governmentSpending
    taxRevenuesKey = economics.taxRevenues
    budgetDeficitKey = economics.budgetDeficit
End 

NationalDebtCalculator:
    budgetDeficitKey = economics.budgetDeficit
    nationalDebtKey = economics.nationalDebt
    nationalDebtToGdpKey = economics.nationalDebtToGdp
    gdpKey = economics.gdp
End 

PopulationPartCalculator:
    totalPopulationKey = society.totalPopulation
    numberOfGroups = 4
    
    # -> Private Sector Employees
    group[0].npKey = socialGroups.privateSectorEmployees.numPeople
    group[0].ppKey = socialGroups.privateSectorEmployees.populationPart
    
    # -> Public Sector Employees
    group[1].npKey = socialGroups.publicSectorEmployees.numPeople
    group[1].ppKey = socialGroups.publicSectorEmployees.populationPart
    
    # -> Unemployed
    group[2].npKey = socialGroups.unemployed.numPeople
    group[2].ppKey = socialGroups.unemployed.populationPart
    
    # -> Retired
    group[3].npKey = socialGroups.retired.numPeople
    group[3].ppKey = socialGroups.retired.populationPart
End

SocialMoodsModel:

    #****************
    # Registry keys
    #****************
    unemploymentRateKey = economics.unemploymentRate
    inflationRateKey = economics.inflationRate
    publicSectorEffectivenessKey = publicSector.effectiveness
    vatRateKey = policies.vat.value
    incomeTaxRateKey = policies.incomeTax.value 
    approvalRatingKey = society.approvalRating
    socialMoodsKey = society.moods
    eventsKey = game.events


    #******************    
    # Model parameters
    #******************
    ir_a = -3.0
    ur_a = -7.0
    pse_a = 1.0
    itr_a = -10.0
    vr_a = -5.0
    agi_a = 0.001
    
    baseDemonstrationPropensity = 0.5
    angerThreashold = 0.3
    unhappinessThreashold = 0.5
    happinessThreashold = 0.6
    baseOpinion_ir = 0.7   # Inflation Rate
    baseOpinion_ur = 0.4   # Unemployment Rate
    baseOpinion_pse = 0.5  # Public Sector Effectiveness
    baseOpinion_itr = 0.5  # Income Tax Rate
    baseOpinion_vr = 0.5   # VAT Rate
    baseOpinionWeight = 0.3
    #seed = 1273503091104
    seed = 0
    numberOfGroups = 4
    
    
    #************************************
    # Social groups' parameters and keys
    #************************************
    # -> Private Sector Employees
    group[0].id = privateSectorEmployees
    group[0].npKey = socialGroups.privateSectorEmployees.numPeople
    group[0].ragiKey = socialGroups.privateSectorEmployees.realAverageGrossIncome
    group[0].apKey = socialGroups.privateSectorEmployees.approvalRating
    group[0].dp = 0.1
    
    # -> Public Sector Employees
    group[1].id = publicSectorEmployees
    group[1].npKey = socialGroups.publicSectorEmployees.numPeople
    group[1].ragiKey = socialGroups.publicSectorEmployees.realAverageGrossIncome
    group[1].apKey = socialGroups.publicSectorEmployees.approvalRating
    group[1].dp = 0.7
    
    # -> Unemployed
    group[2].id = unemployed
    group[2].npKey = socialGroups.unemployed.numPeople
    group[2].ragiKey = socialGroups.unemployed.realAverageGrossIncome
    group[2].apKey = socialGroups.unemployed.approvalRating
    group[2].dp = 0.8
    
    # -> Retired
    group[3].id = retired
    group[3].npKey = socialGroups.retired.numPeople
    group[3].ragiKey = socialGroups.retired.realAverageGrossIncome
    group[3].apKey = socialGroups.retired.approvalRating
    group[3].dp = 0.7
    
End

